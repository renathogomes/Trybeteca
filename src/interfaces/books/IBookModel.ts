import { IBook } from './IBook';
import { NewEntity } from '..'; // para fazer o PUT - atualizar

export interface IBookModel {
  create(data: Partial<IBook>): Promise<IBook>,
  /*
  Aqui estamos definindo um contrato que nossa Model de livros precisa seguir, ou seja, 
  estamos criando as regras do jogo para que a nossa Model funcione perfeitamente.
   Isso garante que a nossa Model tenha um m√©todo create que recebe os dados de um livro e retorna 
   o livro criado no banco de dados.
  
  Podemos dizer que aqui est√° o cora√ß√£o da nossa aplica√ß√£o liter√°ria batendo forte!
   √â atrav√©s deste m√©todo que conseguimos adicionar novos livros √† nossa cole√ß√£o. üìö‚ù§Ô∏è
   
   */

  findAll(): Promise<IBook[]>,
  findById(id: IBook['id']): Promise<IBook | null>

  /*
  Al√©m do m√©todo create anteriormente implementado, agora estamos definindo os contratos 
  dos m√©todos findAll e findById, que se destinar√£o a, respectivamente, retornar todos os 
  livros cadastrados e o livro espec√≠fico pelo seu id. üìö‚ù§Ô∏è
  */

  update(id: IBook['id'], data: NewEntity<IBook>): Promise<IBook | null>

  delete(id: IBook['id']): Promise<number>,
}

// fazer a interface model √© o primeiro passo, depois vai criar a model